{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["smile","react_default","a","createElement","index_es","icon","faSmile","className","sad","faSadTear","App","url","_useState","useState","_useState2","Object","slicedToArray","meteors","setMeteors","_useState3","_useState4","data","setData","_useState5","_useState6","inputValue","setInputValue","_useState7","_useState8","loader","setLoading","_useState9","_useState10","submitted","setSubmitted","_getData","asyncToGenerator","regenerator_default","mark","_callee","response","_data","wrap","_context","prev","next","fetch","sent","json","t0","console","error","message","stop","apply","this","arguments","useEffect","getData","id","onSubmit","e","preventDefault","setTimeout","tempData","filter","item","re","RegExp","concat","name","toLowerCase","test","length","placeholder","type","defaultValue","onChange","target","value","react_loader_spinner_default","color","height","width","Table","bordered","striped","map","key","undefined","nameType","recclass","mass","fall","year","Date","getFullYear","geolocation","latitude","longitude","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65ce668d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Table } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSmile, faSadTear } from '@fortawesome/free-solid-svg-icons';\nimport Loader from 'react-loader-spinner';\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nconst smile = <FontAwesomeIcon icon ={faSmile} className=\"smile\"/> \nconst sad = <FontAwesomeIcon icon ={faSadTear} className=\"smile\"/> \n\n\n\n\nfunction App() {\n  const url = \"https://data.nasa.gov/resource/gh4g-9sfh.json\";\n  const [meteors, setMeteors] = useState([]);\n  const [data, setData] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [loader, setLoading] =useState(false);\n  const [submitted, setSubmitted] = useState(false);\n\n  async function getData(){\n    try {\n      const response = await fetch(url)\n      const data = await response.json();\n      setData(data);\n    } catch (error) {\n      console.error(\"fetch error\", error.message);\n    }\n  }\n\n  // only fetch once and not at every update\n  useEffect(() => {\n      getData()\n  }, []);  \n  \n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n         <nav>\n           <p>Meteorite Explorer</p>\n         </nav>\n      </header>\n      <section id=\"data-body\">\n      <form \n        className=\"search-wrapper\"\n        onSubmit={(e) => {\n           e.preventDefault(); setLoading(true); setSubmitted(true)\n           setTimeout(() => {\n            if (inputValue === '') {\n              setMeteors(data);\n              setLoading(false);\n            } else {\n              let tempData = data.filter(item => {\n                let re = new RegExp(`^${inputValue}`, 'i')\n                return item.name.toLowerCase() === inputValue.toLowerCase() || re.test(item.name.toLowerCase())\n              })\n              if(tempData.length !== 0){\n               setMeteors(tempData);\n               setLoading(false);\n              }\n              else{\n                setMeteors([]);\n                setLoading(false);\n              }\n            }\n           }, 3000);\n        }}\n      >\n        <input \n          placeholder=\"Enter search items\" \n          type=\"search\" \n          defaultValue={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n        />\n        <input type=\"submit\" value=\"SEARCH\" className=\"enter\" />\n      </form>\n      <section className=\"data-window\">\n        {\n        loader ? \n        <div id=\"spinner\">\n           <Loader \n            type=\"ThreeDots\"\n            color=\"white\"\n            height=\"100\"\t\n            width=\"100\"\n         />\n        </div>\n        :\n          meteors.length !== 0 ? \n           (\n            <Table bordered striped className=\"table\">\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>id</th>\n                <th>Name Type</th>\n                <th>Rec Class</th>\n                <th>Mass (g)</th>\n                <th>Fall</th>\n                <th>Year</th>\n                <th>Latitude</th>\n                <th>Longitude</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                meteors.map(item => {\n                  return (\n                    <tr key={`meteor-${item.name}`}>\n                    <td>{item.name !== undefined ? item.name : ''}</td>\n                    <td>{item.id !== undefined ? item.id : ''}</td>\n                    <td>{item.nameType !== undefined ? item.nameType : ''}</td>\n                    <td>{item.recclass !== undefined ? item.recclass : '' }</td>\n                    <td>{item.mass !== undefined ? item.mass : ''}</td>\n                    <td>{item.fall !== undefined ? item.fall : ''}</td>\n                    <td>{item.year !== undefined ? \n                     ( new Date(item.year)).getFullYear() : ''}</td>\n                    <td>{item.geolocation !== undefined ? \n                      item.geolocation.latitude : ''}</td>\n                    <td>{item.geolocation !== undefined ? \n                      item.geolocation.longitude : ''}</td>\n                    </tr>\n                  )\n                })\n              }\n            </tbody>\n          </Table>\n           )\n          :\n          inputValue === '' || submitted === false ?\n          (\n            <div id=\"no-data-message\" className=\"message-one\">\n              <p> \n                {smile} \n                 <span className=\"initial\">\n                 Please search a meteor landing by name \n                 or simply click search to list all landings\n                 </span>\n              </p>\n            </div>\n          ) :\n          (\n            <div id=\"no-data-message\" className=\"message-two\">\n              <p> \n                {sad} \n                 <span className=\"flashed\">\n                 Please confirm your meteor query\n                 </span>\n              </p>\n            </div>\n          )\n        }\n      </section>\n      </section>\n      \n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}